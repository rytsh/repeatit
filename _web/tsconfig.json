{
  "compilerOptions": {
    "moduleResolution": "Node",
    "target": "esnext",
    "module": "esnext",
    /**
     * svelte-preprocess cannot figure out whether you have
     * a value or a type, so tell TypeScript to enforce using
     * `import type` instead of `import` for Types.
     */
    "verbatimModuleSyntax": true,
    "isolatedModules": true,
    /**
     * To have warnings / errors of the Svelte compiler at the
     * correct position, enable source maps by default.
     */
    "sourceMap": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "baseUrl": ".",
    /**
     * Typecheck JS in `.svelte` and `.js` files by default.
     * Disable this if you'd like to use dynamic types.
     */
    "allowJs": false,
    "checkJs": false,
    "paths": {
      "@/*": [
        "src/*"
      ],
      "$lib": [
        "src/lib"
      ],
      "$lib/*": [
        "src/lib/*"
      ]
    }
  },
  /**
   * Use global.d.ts instead of compilerOptions.types
   * to avoid limiting type declarations.
   */
  "include": [
    "src/**/*.d.ts",
    "src/**/*.ts",
    "src/**/*.js",
    "src/**/*.svelte",
    "**/*.config.js",
    "**/*.*rc.js",
    "**/*.html",
    ".eslintrc.cjs",
    "postcss.config.cjs",
    "tailwind.config.cjs",
    "public/wasm/wasm_exec.js",
  ],
  "exclude": [
    "node_modules/*"
  ],
  "extends": "./.svelte-kit/tsconfig.json"
}
